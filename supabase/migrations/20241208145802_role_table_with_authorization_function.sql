CREATE TABLE public.role (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL UNIQUE
);


DO $$
BEGIN
    PERFORM public.add_audit_columns('public', 'role');
END $$;


ALTER TABLE public.role ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Enable select for authenticated users" ON public.role FOR SELECT TO authenticated USING (TRUE);


INSERT INTO public.role (name) VALUES ('Administrator');
INSERT INTO public.role (name) VALUES ('Project Manager');
INSERT INTO public.role (name) VALUES ('Team Member');


CREATE TABLE public.user_role (
    user_id UUID NOT NULL REFERENCES public.profile(user_id) ON DELETE CASCADE,
    role_id BIGINT NOT NULL REFERENCES public.role(id) ON DELETE CASCADE,
    PRIMARY KEY (user_id, role_id)
);


DO $$
BEGIN
    PERFORM public.add_audit_columns('public', 'user_role');
END $$;


CREATE FUNCTION public.has_role(
    role_name TEXT
) RETURNS BOOLEAN AS
$$
BEGIN 
    RETURN EXISTS (
        SELECT 1
        FROM user_role
        INNER JOIN role ON role.id = user_role.role_id
        WHERE user_role.user_id = (SELECT auth.uid())
        AND role.name = role_name
    );
END;
$$ LANGUAGE PLPGSQL;


ALTER TABLE public.user_role ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Enable select for authenticated users based on user_id only" ON public.user_role FOR SELECT TO authenticated USING (
    ((SELECT auth.uid()) = user_id)
    OR ((SELECT public.has_role('Administrator')))
);
CREATE POLICY "Enable insert for authenticated admins" ON public.user_role FOR INSERT TO authenticated WITH CHECK ((SELECT public.has_role('Administrator')));
CREATE POLICY "Enable update for authenticated admins" ON public.user_role FOR UPDATE TO authenticated USING ((SELECT public.has_role('Administrator')));
CREATE POLICY "Enable delete for authenticated admins" ON public.user_role FOR DELETE TO authenticated USING ((SELECT public.has_role('Administrator')));


DROP POLICY "Enable insert for authenticated owners" ON "public"."profile";
DROP POLICY "Enable update for authenticated owners" ON "public"."profile";
DROP POLICY "Enable delete for authenticated owners" ON "public"."profile";

CREATE POLICY "Enable insert for owners or admins" ON "public"."profile" FOR INSERT TO "authenticated" WITH CHECK (
    ((SELECT auth.uid()) = user_id)
    OR ((SELECT public.has_role('Administrator')))
);
CREATE POLICY "Enable update for owners or admins" ON "public"."profile" FOR UPDATE TO "authenticated" USING (
    ((SELECT auth.uid()) = user_id)
    OR ((SELECT public.has_role('Administrator')))
) WITH CHECK (
    ((SELECT auth.uid()) = user_id)
    OR ((SELECT public.has_role('Administrator')))
);
CREATE POLICY "Enable delete for owners or admins" ON "public"."profile" FOR DELETE TO "authenticated" USING (
    ((SELECT auth.uid()) = user_id)
    OR ((SELECT public.has_role('Administrator')))
);